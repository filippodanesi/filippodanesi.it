---
import { marked } from 'marked';
import Button from './Button.astro';
import siteConfig from '../data/site-config';
import '../styles/global.css';

const hero = siteConfig.hero;
---

{
    (hero?.title || hero?.image?.src || hero?.text || (hero?.actions && hero.actions.length > 0)) && (
        <section class="w-full flex flex-col gap-8 mb-16 sm:mb-24">
            <div class="flex flex-col-reverse md:flex-row gap-8 items-start">
                <div class="flex-1">
                    {hero.text && (
                        <div class="max-w-none prose prose-dante sm:prose-lg" set:html={marked.parse(hero.text)} />
                    )}
                    
                    {hero.actions && hero.actions.length > 0 && (
                        <div class="flex flex-wrap gap-4 mt-8">
                            {hero.actions.map((action) => (
                                <Button 
                                    href={action.href}
                                    external={action.external}
                                >
                                    {action.text}
                                </Button>
                            ))}
                        </div>
                    )}
                </div>
                
                {hero.image?.src && (
                    <figure class="w-full flex flex-col items-center md:items-start md:w-1/3">
                        <img class="w-full max-w-[200px] md:max-w-none" src="/filippo.png" alt="Filippo Danesi - SEO Strategist & AI Innovation Specialist" />
                        {hero.image.caption && (
                            <figcaption class="mt-1.5 text-[0.7rem] text-text-muted/60 text-center w-full">
                                {hero.image.caption}
                            </figcaption>
                        )}
                    </figure>
                )}
            </div>
        </section>
    )
}

<style>
    .svg-container {
        --svg-fill: rgb(var(--color-text-main));
    }

    .svg-path {
        fill: var(--svg-fill);
    }
</style>

<script>
    function isHTMLElement(element: Element | null): element is HTMLElement {
        return element !== null && 'style' in element;
    }

    const observer = new MutationObserver((mutations) => {
        mutations.forEach((mutation) => {
            if (mutation.target.nodeName === 'HTML' && mutation.attributeName === 'class') {
                const isDark = document.documentElement.classList.contains('dark');
                const container = document.querySelector('.svg-container');
                
                if (isHTMLElement(container)) {
                    container.style.setProperty('--svg-fill', 
                        isDark ? 'rgb(242, 241, 236)' : 'rgb(23, 23, 23)'
                    );
                }
            }
        });
    });

    observer.observe(document.documentElement, { 
        attributes: true,
        attributeFilter: ['class']
    });
</script>